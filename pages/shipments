<template>
  <div>
    <header class="mb-6 flex flex-col md:flex-row md:items-center md:justify-between">
      <div>
        <h1 class="text-xl font-semibold text-gray-800">Shipment Management</h1>
        <p class="text-gray-600">Track and manage shipments associated with transactions</p>
      </div>

      <div class="mt-4 md:mt-0 flex space-x-3">
        <button class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
          <FileText class="mr-2 h-4 w-4 text-gray-500" />
          Export CSV
        </button>
        <button class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
          <Plus class="mr-2 h-4 w-4" />
          Create Shipment
        </button>
      </div>
    </header>

    <!-- Filter & Search Bar -->
    <div class="bg-white rounded-lg shadow-sm mb-6">
      <div class="p-4 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div class="flex flex-1 flex-col sm:flex-row gap-3">
          <div class="relative flex-1">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search class="h-5 w-5 text-gray-400" />
            </div>
            <input
              v-model="searchQuery"
              type="text"
              class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              placeholder="Search by tracking number, customer name, or order ID..."
            />
          </div>

          <div class="flex space-x-3">
            <div class="relative">
              <select
                v-model="filters.status"
                class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md"
              >
                <option value="">All Statuses</option>
                <option value="pending">Pending</option>
                <option value="in_transit">In Transit</option>
                <option value="delivered">Delivered</option>
                <option value="delayed">Delayed</option>
                <option value="exception">Exception</option>
              </select>
            </div>

            <div class="relative">
              <select
                v-model="filters.carrier"
                class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md"
              >
                <option value="">All Carriers</option>
                <option value="fedex">FedEx</option>
                <option value="ups">UPS</option>
                <option value="usps">USPS</option>
                <option value="dhl">DHL</option>
              </select>
            </div>
          </div>
        </div>

        <div class="flex items-center">
          <button
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
            @click="showAdvancedFilters = !showAdvancedFilters"
          >
            <Filter class="mr-2 h-4 w-4 text-gray-500" />
            {{ showAdvancedFilters ? 'Hide Filters' : 'Advanced Filters' }}
          </button>

          <button
            v-if="isFiltered"
            class="ml-3 text-sm text-purple-600 hover:text-purple-500"
            @click="resetFilters"
          >
            Clear Filters
          </button>
        </div>
      </div>

      <!-- Advanced Filters (conditional) -->
      <div v-if="showAdvancedFilters" class="px-4 py-3 border-t border-gray-200 bg-gray-50">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Shipment Date Range</label>
            <div class="flex space-x-2">
              <input
                v-model="filters.dateFrom"
                type="date"
                class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              />
              <input
                v-model="filters.dateTo"
                type="date"
                class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Delivery ETA</label>
            <div class="flex space-x-2">
              <select
                v-model="filters.deliveryWindow"
                class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              >
                <option value="">Any Time</option>
                <option value="today">Today</option>
                <option value="tomorrow">Tomorrow</option>
                <option value="this_week">This Week</option>
                <option value="next_week">Next Week</option>
                <option value="overdue">Overdue</option>
              </select>
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Destination Country</label>
            <select
              v-model="filters.country"
              class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
            >
              <option value="">All Countries</option>
              <option value="US">United States</option>
              <option value="CA">Canada</option>
              <option value="UK">United Kingdom</option>
              <option value="AU">Australia</option>
              <option value="DE">Germany</option>
              <option value="JP">Japan</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
      <StatCard
        title="Total Shipments"
        value="3,845"
        change="+2.8%"
        trend="up"
        icon="Package"
        color="purple"
      />

      <StatCard
        title="In Transit"
        value="567"
        change="+5.2%"
        trend="up"
        icon="Truck"
        color="blue"
      />

      <StatCard
        title="Delivered"
        value="3,164"
        change="+1.7%"
        trend="up"
        icon="CheckCircle"
        color="green"
      />

      <StatCard
        title="Delayed/Exceptions"
        value="114"
        change="-3.5%"
        trend="down"
        icon="AlertTriangle"
        color="amber"
      />
    </div>

    <!-- Shipments Table -->
    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
      <div v-if="isLoading" class="flex justify-center items-center p-12">
        <Loader class="h-8 w-8 text-purple-600 animate-spin" />
        <span class="ml-2 text-gray-600">Loading shipments...</span>
      </div>

      <div v-else-if="filteredShipments.length === 0" class="text-center py-16">
        <Package class="mx-auto h-12 w-12 text-gray-300" />
        <h3 class="mt-2 text-sm font-medium text-gray-900">No shipments found</h3>
        <p class="mt-1 text-sm text-gray-500">
          {{ isFiltered ? 'Try adjusting your filters or search query.' : 'Get started by creating a shipment.' }}
        </p>
        <div class="mt-6">
          <button
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
          >
            <Plus class="mr-2 h-4 w-4" />
            Create Shipment
          </button>
        </div>
      </div>

      <table v-else class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th
              v-for="header in tableHeaders"
              :key="header.key"
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              {{ header.label }}
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr
            v-for="shipment in paginatedShipments"
            :key="shipment.id"
            @click="viewShipmentDetails(shipment.id)"
            class="hover:bg-gray-50 cursor-pointer"
          >
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">#{{ shipment.id }}</div>
              <div class="text-xs text-gray-500">{{ formatDate(shipment.createdAt) }}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">{{ shipment.trackingNumber }}</div>
              <div class="text-xs text-gray-500">{{ getCarrierName(shipment.carrier) }}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">{{ shipment.customer.name }}</div>
              <div class="text-xs text-gray-500">Order #{{ shipment.orderId }}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">{{ shipment.destination.city }}, {{ shipment.destination.state }}</div>
              <div class="text-xs text-gray-500">{{ getCountryName(shipment.destination.country) }}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <ShipmentStatusBadge :status="shipment.status" />
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium" :class="getETAClass(shipment)">
                {{ formatDate(shipment.estimatedDelivery) }}
              </div>
              <div class="text-xs text-gray-500">
                {{ getETAText(shipment) }}
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <div class="flex justify-end space-x-3">
                <button
                  @click.stop="updateShipmentStatus(shipment.id)"
                  class="text-purple-600 hover:text-purple-900"
                >
                  Update
                </button>
                <button
                  @click.stop="trackShipment(shipment.trackingNumber, shipment.carrier)"
                  class="text-blue-600 hover:text-blue-900"
                >
                  Track
                </button>
              </div>
            </td>
          </tr>
        </tbody>
      </table>

      <!-- Pagination -->
      <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
        <div class="flex items-center justify-between">
          <div class="hidden sm:block">
            <p class="text-sm text-gray-700">
              Showing <span class="font-medium">{{ paginationStart }}</span> to <span class="font-medium">{{ paginationEnd }}</span> of <span class="font-medium">{{ filteredShipments.length }}</span> shipments
            </p>
          </div>
          <div class="flex-1 flex justify-center sm:justify-end">
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button
                @click="currentPage--"
                :disabled="currentPage === 1"
                class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span class="sr-only">Previous</span>
                <ChevronLeft class="h-5 w-5" />
              </button>

              <template v-for="page in totalPages" :key="page">
                <button
                  v-if="totalPages <= 7 || page === 1 || page === totalPages || (page >= currentPage - 1 && page <= currentPage + 1)"
                  @click="currentPage = page"
                  :class="[
                    currentPage === page
                      ? 'z-10 bg-purple-50 border-purple-500 text-purple-600'
                      : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50',
                    'relative inline-flex items-center px-4 py-2 border text-sm font-medium'
                  ]"
                >
                  {{ page }}
                </button>
                <span
                  v-else-if="(page === 2 && currentPage > 3) || (page === totalPages - 1 && currentPage < totalPages - 2)"
                  class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700"
                >
                  ...
                </span>
              </template>

              <button
                @click="currentPage++"
                :disabled="currentPage === totalPages"
                class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span class="sr-only">Next</span>
                <ChevronRight class="h-5 w-5" />
              </button>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import {
  Search,
  Filter,
  FileText,
  Plus,
  Package,
  ChevronLeft,
  ChevronRight,
  Loader
} from 'lucide-vue-next'

// State
const shipments = ref([])
const searchQuery = ref('')
const isLoading = ref(true)
const currentPage = ref(1)
const itemsPerPage = ref(10)
const showAdvancedFilters = ref(false)
const filters = ref({
  status: '',
  carrier: '',
  dateFrom: '',
  dateTo: '',
  deliveryWindow: '',
  country: ''
})

// Table headers
const tableHeaders = [
  { key: 'id', label: 'Shipment ID' },
  { key: 'tracking', label: 'Tracking Info' },
  { key: 'customer', label: 'Customer / Order' },
  { key: 'destination', label: 'Destination' },
  { key: 'status', label: 'Status' },
  { key: 'eta', label: 'Estimated Delivery' },
  { key: 'actions', label: 'Actions' }
]

// Load shipments data
onMounted(async () => {
  try {
    // In a real app, this would be an API call
    // await fetchShipments()

    // For demo purposes, we'll use mock data
    await new Promise(resolve => setTimeout(resolve, 1000))
    shipments.value = generateMockShipments(50)
  } finally {
    isLoading.value = false
  }
})

// Check if filters are applied
const isFiltered = computed(() => {
  return (
    searchQuery.value !== '' ||
    filters.value.status !== '' ||
    filters.value.carrier !== '' ||
    filters.value.dateFrom !== '' ||
    filters.value.dateTo !== '' ||
    filters.value.deliveryWindow !== '' ||
    filters.value.country !== ''
  )
})

// Filter shipments based on search and filters
const filteredShipments = computed(() => {
  let result = [...shipments.value]

  // Apply search filter
  if (searchQuery.value) {
    const query = searchQuery.value.toLowerCase()
    result = result.filter(shipment =>
      shipment.trackingNumber.toLowerCase().includes(query) ||
      shipment.customer.name.toLowerCase().includes(query) ||
      shipment.orderId.toLowerCase().includes(query) ||
      shipment.id.toLowerCase().includes(query)
    )
  }

  // Apply status filter
  if (filters.value.status) {
    result = result.filter(shipment => shipment.status === filters.value.status)
  }

  // Apply carrier filter
  if (filters.value.carrier) {
    result = result.filter(shipment => shipment.carrier === filters.value.carrier)
  }

  // Apply date range filter
  if (filters.value.dateFrom) {
    const fromDate = new Date(filters.value.dateFrom)
    result = result.filter(shipment => new Date(shipment.createdAt) >= fromDate)
  }

  if (filters.value.dateTo) {
    const toDate = new Date(filters.value.dateTo)
    toDate.setHours(23, 59, 59, 999) // End of the day
    result = result.filter(shipment => new Date(shipment.createdAt) <= toDate)
  }

  // Apply delivery window filter
  if (filters.value.deliveryWindow) {
    const today = new Date()
    const tomorrow = new Date(today)
    tomorrow.setDate(today.getDate() + 1)

    const thisWeekEnd = new Date(today)
    thisWeekEnd.setDate(today.getDate() + (7 - today.getDay()))

    const nextWeekStart = new Date(thisWeekEnd)
    nextWeekStart.setDate(thisWeekEnd.getDate() + 1)

    const nextWeekEnd = new Date(nextWeekStart)
    nextWeekEnd.setDate(nextWeekStart.getDate() + 6)

    if (filters.value.deliveryWindow === 'today') {
      result = result.filter(shipment => {
        const etaDate = new Date(shipment.estimatedDelivery)
        return etaDate.toDateString() === today.toDateString()
      })
    } else if (filters.value.deliveryWindow === 'tomorrow') {
      result = result.filter(shipment => {
        const etaDate = new Date(shipment.estimatedDelivery)
        return etaDate.toDateString() === tomorrow.toDateString()
      })
    } else if (filters.value.deliveryWindow === 'this_week') {
      result = result.filter(shipment => {
        const etaDate = new Date(shipment.estimatedDelivery)
        return etaDate >= today && etaDate <= thisWeekEnd
      })
    } else if (filters.value.deliveryWindow === 'next_week') {
      result = result.filter(shipment => {
        const etaDate = new Date(shipment.estimatedDelivery)
        return etaDate >= nextWeekStart && etaDate <= nextWeekEnd
      })
    } else if (filters.value.deliveryWindow === 'overdue') {
      result = result.filter(shipment => {
        const etaDate = new Date(shipment.estimatedDelivery)
        return etaDate < today && shipment.status !== 'delivered'
      })
    }
  }

  // Apply country filter
  if (filters.value.country) {
    result = result.filter(shipment => shipment.destination.country === filters.value.country)
  }

  return result
})

// Paginated shipments
const paginatedShipments = computed(() => {
  const startIdx = (currentPage.value - 1) * itemsPerPage.value
  const endIdx = startIdx + itemsPerPage.value
  return filteredShipments.value.slice(startIdx, endIdx)
})

// Pagination calculations
const totalPages = computed(() => {
  return Math.ceil(filteredShipments.value.length / itemsPerPage.value) || 1
})

const paginationStart = computed(() => {
  return (currentPage.value - 1) * itemsPerPage.value + 1
})

const paginationEnd = computed(() => {
  return Math.min(currentPage.value * itemsPerPage.value, filteredShipments.value.length)
})

// Reset filters
const resetFilters = () => {
  searchQuery.value = ''
  filters.value = {
    status: '',
    carrier: '',
    dateFrom: '',
    dateTo: '',
    deliveryWindow: '',
    country: ''
  }
  currentPage.value = 1
}

// View shipment details
const viewShipmentDetails = (id: string) => {
  // Navigate to shipment details page
  // router.push(`/shipments/${id}`)
  console.log('View shipment details:', id)
}

// Update shipment status
const updateShipmentStatus = (id: string) => {
  // Open status update modal or navigate to update page
  console.log('Update shipment status:', id)
}

// Track shipment externally
const trackShipment = (trackingNumber: string, carrier: string) => {
  // Open carrier tracking site in new window
  let trackingUrl = ''

  switch (carrier) {
    case 'fedex':
      trackingUrl = `https://www.fedex.com/fedextrack/?trknbr=${trackingNumber}`
      break
    case 'ups':
      trackingUrl = `https://www.ups.com/track?tracknum=${trackingNumber}`
      break
    case 'usps':
      trackingUrl = `https://tools.usps.com/go/TrackConfirmAction?tLabels=${trackingNumber}`
      break
    case 'dhl':
      trackingUrl = `https://www.dhl.com/en/express/tracking.html?AWB=${trackingNumber}`
      break
    default:
      alert('No tracking URL available for this carrier')
      return
  }

  window.open(trackingUrl, '_blank')
}

// Format date
const formatDate = (isoDate: string) => {
  if (!isoDate) return 'N/A'

  return new Date(isoDate).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}

// Get carrier name from code
const getCarrierName = (code: string) => {
  const carriers = {
    fedex: 'FedEx',
    ups: 'UPS',
    usps: 'USPS',
    dhl: 'DHL'
  }

  return carriers[code] || code
}

// Get country name from code
const getCountryName = (code: string) => {
  const countries = {
    US: 'United States',
    CA: 'Canada',
    UK: 'United Kingdom',
    AU: 'Australia',
    DE: 'Germany',
    JP: 'Japan'
  }

  return countries[code] || code
}

// Get ETA text and classes
const getETAClass = (shipment) => {
  if (shipment.status === 'delivered') {
    return 'text-green-600'
  }

  const today = new Date()
  const etaDate = new Date(shipment.estimatedDelivery)

  if (etaDate < today && shipment.status !== 'delivered') {
    return 'text-red-600'
  }

  const tomorrow = new Date(today)
  tomorrow.setDate(today.getDate() + 1)

  if (etaDate.toDateString() === today.toDateString()) {
    return 'text-yellow-600'
  }

  return 'text-gray-900'
}

const getETAText = (shipment) => {
  if (shipment.status === 'delivered') {
    return 'Delivered'
  }

  const today = new Date()
  const etaDate = new Date(shipment.estimatedDelivery)

  if (etaDate < today && shipment.status !== 'delivered') {
    return 'Overdue'
  }

  const tomorrow = new Date(today)
  tomorrow.setDate(today.getDate() + 1)

  if (etaDate.toDateString() === today.toDateString()) {
    return 'Today'
  }

  if (etaDate.toDateString() === tomorrow.toDateString()) {
    return 'Tomorrow'
  }

  // Calculate days from now
  const diffTime = Math.abs(etaDate.getTime() - today.getTime())
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))

  return `In ${diffDays} days`
}

// Generate mock shipments for demo
const generateMockShipments = (count: number) => {
  const statuses = ['pending', 'in_transit', 'delivered', 'delayed', 'exception']
  const carriers = ['fedex', 'ups', 'usps', 'dhl']
  const countries = ['US', 'CA', 'UK', 'AU', 'DE', 'JP']
  const cities = {
    US: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Miami'],
    CA: ['Toronto', 'Vancouver', 'Montreal', 'Calgary', 'Ottawa'],
    UK: ['London', 'Manchester', 'Birmingham', 'Glasgow', 'Liverpool'],
    AU: ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide'],
    DE: ['Berlin', 'Munich', 'Hamburg', 'Frankfurt', 'Cologne'],
    JP: ['Tokyo', 'Osaka', 'Kyoto', 'Yokohama', 'Nagoya']
  }
  const states = {
    US: ['NY', 'CA', 'IL', 'TX', 'FL'],
    CA: ['ON', 'BC', 'QC', 'AB', 'MB'],
    UK: ['LDN', 'MAN', 'BIR', 'GLA', 'LIV'],
    AU: ['NSW', 'VIC', 'QLD', 'WA', 'SA'],
    DE: ['BE', 'BY', 'HH', 'HE', 'NW'],
    JP: ['TK', 'OS', 'KY', 'KN', 'AI']
  }

  const randomCustomers = [
    { name: 'John Anderson', email: 'john.anderson@example.com' },
    { name: 'Alice Smith', email: 'alice.smith@example.com' },
    { name: 'Robert Johnson', email: 'robert.johnson@example.com' },
    { name: 'Emily Davis', email: 'emily.davis@example.com' },
    { name: 'Michael Wilson', email: 'michael.wilson@example.com' },
    { name: 'Sarah Thompson', email: 'sarah.thompson@example.com' },
    { name: 'James Taylor', email: 'james.taylor@example.com' },
    { name: 'Jennifer Martinez', email: 'jennifer.martinez@example.com' }
  ]

  const shipments = []

  // Current date for reference
  const now = new Date()

  for (let i = 0; i < count; i++) {
    // Create random dates
    const createdDate = new Date(now.getTime())
    createdDate.setDate(now.getDate() - Math.floor(Math.random() * 30)) // Last 30 days

    const randomStatus = statuses[Math.floor(Math.random() * statuses.length)]
    const randomCarrier = carriers[Math.floor(Math.random() * carriers.length)]
    const randomCountry = countries[Math.floor(Math.random() * countries.length)]
    const randomCity = cities[randomCountry][Math.floor(Math.random() * cities[randomCountry].length)]
    const randomState = states[randomCountry][Math.floor(Math.random() * states[randomCountry].length)]
    const randomCustomer = randomCustomers[Math.floor(Math.random() * randomCustomers.length)]

    // Create estimated delivery date based on status
    let estimatedDelivery = new Date(createdDate.getTime())
    let daysToAdd = 3 + Math.floor(Math.random() * 7) // 3-10 days

    if (randomStatus === 'delivered') {
      // For delivered items, set ETA in the past
      daysToAdd = Math.floor(Math.random() * 5) // 0-4 days
      estimatedDelivery.setDate(createdDate.getDate() + daysToAdd)
    } else if (randomStatus === 'delayed' || randomStatus === 'exception') {
      // For delayed items, set ETA further out
      daysToAdd = 7 + Math.floor(Math.random() * 7) // 7-14 days
      estimatedDelivery.setDate(createdDate.getDate() + daysToAdd)
    } else {
      // For pending/in_transit
      daysToAdd = 3 + Math.floor(Math.random() * 5) // 3-7 days
      estimatedDelivery.setDate(createdDate.getDate() + daysToAdd)

      // Some in transit should be arriving soon
      if (randomStatus === 'in_transit' && Math.random() > 0.7) {
        estimatedDelivery = new Date(now.getTime())
        estimatedDelivery.setDate(now.getDate() + Math.floor(Math.random() * 2)) // Today or tomorrow
      }
    }

    // Create shipment object
    shipments.push({
      id: `SHP${10000 + i}`,
      trackingNumber: `${randomCarrier.toUpperCase()}-${Math.floor(Math.random() * 10000000)}`,
      carrier: randomCarrier,
      status: randomStatus,
      createdAt: createdDate.toISOString(),
      estimatedDelivery: estimatedDelivery.toISOString(),
      customer: randomCustomer,
      orderId: `ORD-${9000 + i}`,
      destination: {
        address: `${123 + i} Main St`,
        city: randomCity,
        state: randomState,
        postalCode: `${10000 + Math.floor(Math.random() * 90000)}`,
        country: randomCountry
      }
    })
  }

  return shipments
}
</script>